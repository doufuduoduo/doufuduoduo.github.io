<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>RabbitMQ</title>
    <url>/2020/02/26/RabbitMQ/</url>
    <content><![CDATA[<h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>RabbitMQ是实现了<strong>高级消息队列协议</strong>（AMQP）的开源消息代理软件（亦称面向消息的中间件）。所谓的AMQP，指的是Advanced Message Queuing Protocol，一个<strong>提供统一消息服务</strong>的应用层标准高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。基于此协议的客户端与消息中间件可传递消息，并不受客户端/中间件不同产品，不同的开发语言等条件的限制。</p>
<p>官方地址：<a href="http://www.rabbitmq.com/" target="_blank" rel="noopener">http://www.rabbitmq.com/</a></p>
<p>在开发中MQ通常有如下应用场景：</p>
<ol>
<li>任务异步处理<br>将不需要同步处理的并且耗时长的操作由消息队列通知消息接收方进行异步处理。提高了应用程序的响应时间。</li>
<li>应用程序解耦合<br>MQ相当于一个中介，生产方通过MQ与消费方交互，它将应用程序进行解耦合。</li>
</ol>
<p>除了AMQP之外，JMS也可以供程序之间进行通信。但不同的是JMS只适用于Java应用，而AMQP适用于所有应用，是跨语言的。</p>
<h2 id="2-架构"><a href="#2-架构" class="headerlink" title="2. 架构"></a>2. 架构</h2><p>RabbitMQ的基本结构：<br><img src="/.cn//image-20200218150527233.png" alt="image-20200218150527233"></p>
<p>组成部分说明如下：</p>
<ul>
<li>Broker：消息队列服务进程，此进程包括两个部分：Exchange和Queue</li>
<li>Exchange：消息队列交换机，按一定的规则将消息路由转发到某个队列，对消息进行过虑</li>
<li>Queue：消息队列，存储消息的队列，消息到达队列并转发给指定的消费方</li>
<li>Producer：消息生产者，发送消息到MQ</li>
<li>Consumer：消息消费者，接收MQ转发的消息</li>
</ul>
<h2 id="3-工作模式"><a href="#3-工作模式" class="headerlink" title="3. 工作模式"></a>3. 工作模式</h2><p>RabbitMQ有6种工作模式 （或称为6种交换机），分别是Work queues（任务队列）、Publish/Subscribe（发布/订阅）、Routing（路由）、Topics（通配符）、Header、RPC</p>
<h3 id="3-1-Work-Queues"><a href="#3-1-Work-Queues" class="headerlink" title="3.1. Work Queues"></a>3.1. Work Queues</h3><p><img src="/.cn//image-20200218152331989.png" alt="image-20200218152331989"></p>
<p>在任务较多或者繁忙时，使用Work Queues模式，生产者P可以将消息发送到与之绑定的消息队列中，然后通过消息队列采用轮询的方式将消息转发给与之绑定的消费者上。其中一条消息只能被一个消费者接受，并且只有处理完当前消息，才能收到下一条消息。</p>
<p>###3.2. Publish/Subscribe</p>
<p><img src="/.cn//image-20200218153553336.png" alt="image-20200218153553336"></p>
<p>在Publish/Subscribe模式中，生产者P可以通过交换机X将消息发送到与之绑定的消息队列上，再通过消息队列转发与之绑定的消费者上。每个交换机绑定的队列都将接收到消息。</p>
<h3 id="3-3-Routing"><a href="#3-3-Routing" class="headerlink" title="3.3. Routing"></a>3.3. Routing</h3><p><img src="/.cn//image-20200218154240721.png" alt="image-20200218154240721"></p>
<p>在Routing模式中，生产者P将消息发送到交换机X上，交换机X在通过RoutingKey转发到绑定了指定RoutingKey的消息队列上，最后再将消息转发到消费者上。其中，一个队列可以有多个RoutingKey，不同的队列可以有相同的RoutingKey。</p>
<p>###3.4. Topics</p>
<p><img src="/.cn//image-20200218155333712.png" alt="image-20200218155333712"></p>
<p>Topics模式与Routing模式相似，与之不同的是，Topic的RoutingKey可以带通配符，通配符用符号“.”分隔，符号“#”表示匹配任意个字符，符号“*”表示匹配一个字符。</p>
<p>###3.5. Header</p>
<p>Header模式与Routing模式相似，与之不同的是，Header模式取消了RoutingKey，采用看Key/Value的形式匹配队列。</p>
<p>当要发送广告给用户时，可以根据用户的偏好设置去通知用户，设置接收Email的用户发送Email，设置接收短信的用户接收短信，设置两种通知类型都接收的用户则两种通知都有效。</p>
<p>###3.6. RPC</p>
<p><img src="/.cn//image-20200218160009888.png" alt="image-20200218160009888"></p>
<p>在RPC模式中 ，使用MQ可以实现RPC的异步调用，基于Direct交换机实现。客户端向RPC请求队列发送调用信息，服务端监听到RPC请求队列的消息后，执行方法并将结果发送到RPC响应队列，客户端监听RPC响应队列，接收RPC响应队列的消息。</p>
<h2 id="4-与SpringBoot的整合"><a href="#4-与SpringBoot的整合" class="headerlink" title="4. 与SpringBoot的整合"></a>4. 与SpringBoot的整合</h2><p>###4.1. 搭建环境</p>
<p>在与Spring Boot整合时，使用spring-boot-starter-amqp会自动添加spring-rabbit依赖，如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring‐boot‐starter‐amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-2-配置"><a href="#4-2-配置" class="headerlink" title="4.2. 配置"></a>4.2. 配置</h3><p>####4.2.1. Application.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">	<span class="attr">port:</span> <span class="number">44000</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">	<span class="attr">application:</span></span><br><span class="line">		<span class="attr">name:</span> <span class="string">test‐rabbitmq‐producer</span></span><br><span class="line">	<span class="attr">rabbitmq:</span></span><br><span class="line">        <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">        <span class="attr">virtualHost:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure>

<p>####4.2.2. 定义RabbitmqConfig类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMqConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 消息队列名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"WLP"</span>;</span><br><span class="line">    <span class="comment">// 交换机名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_NAME = <span class="string">"WYPH"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> WorkQueues模式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Return</span> org.springframework.amqp.core.Exchange</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Auther</span> DOUFUDUODUO</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(EXCHANGE_NAME)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Exchange <span class="title">Exchange_WorkQueues</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ExchangeBuilder.fanoutExchange(<span class="string">""</span>).durable(<span class="keyword">true</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> Publish/Subscribe模式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Return</span> org.springframework.amqp.core.Exchange</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Auther</span> DOUFUDUODUO</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(EXCHANGE_NAME)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Exchange <span class="title">Exchange_Fanout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ExchangeBuilder.fanoutExchange(EXCHANGE_NAME).durable(<span class="keyword">true</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> Routing模式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Return</span> org.springframework.amqp.core.Exchange</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Auther</span> DOUFUDUODUO</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(EXCHANGE_NAME)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Exchange <span class="title">Exchange_Routing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ExchangeBuilder.directExchange(EXCHANGE_NAME).durable(<span class="keyword">true</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> Topic模式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Return</span> org.springframework.amqp.core.Exchange</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Auther</span> DOUFUDUODUO</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(EXCHANGE_NAME)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Exchange <span class="title">Exchange_Topic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ExchangeBuilder.topicExchange(EXCHANGE_NAME).durable(<span class="keyword">true</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> Header模式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Return</span> org.springframework.amqp.core.Exchange</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Auther</span> DOUFUDUODUO</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(EXCHANGE_NAME)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Exchange <span class="title">Exchange_Header</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ExchangeBuilder.headersExchange(<span class="string">""</span>).durable(<span class="keyword">true</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 声明队列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Return</span> org.springframework.amqp.core.Queue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Auther</span> DOUFUDUODUO</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(QUEUE_NAME)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">QUEUE</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Queue queue = <span class="keyword">new</span> Queue(QUEUE_NAME);</span><br><span class="line">        <span class="keyword">return</span> queue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 绑定队列到交换机</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span> [queue, exchange]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Return</span> org.springframework.amqp.core.Binding</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Auther</span> DOUFUDUODUO</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">BINDING</span><span class="params">(@Qualifier(QUEUE_NAME)</span> Queue queue,</span></span><br><span class="line"><span class="function">                           @<span class="title">Qualifier</span><span class="params">(EXCHANGE_NAME)</span> Exchange exchange) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="string">"Key"</span>).noargs();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-3-测试"><a href="#4-3-测试" class="headerlink" title="4.3. 测试"></a>4.3. 测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitmqService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 发送消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Return</span> void</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Auther</span> DOUFUDUODUO</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String message = <span class="string">"message"</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitMqConfig.EXCHANGE_NAME, <span class="string">"key"</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 监听队列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span> [msg, message, channel]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Return</span> void</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Auther</span> DOUFUDUODUO</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = &#123;RabbitMqConfig.QUEUE_NAME&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive_email</span><span class="params">(String msg, Message message, RabbitProperties.Cache.Channel channel)</span></span>&#123;</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>RabbitMQ</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
        <tag>MQ</tag>
      </tags>
  </entry>
</search>
